#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# ROMFS is the directory containing data to be added to RomFS, relative to the Makefile (Optional)
#
# NO_ICON: if set to anything, do not use icon.
# NO_NACP: if set to anything, no .nacp file is generated.
# APP_TITLE is the name of the app stored in the .nacp file (Optional)
# APP_AUTHOR is the author of the app stored in the .nacp file (Optional)
# APP_VERSION is the version of the app stored in the .nacp file (Optional)
# APP_TITLEID is the titleID of the app stored in the .nacp file (Optional)
# ICON is the filename of the icon (.jpg), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.jpg
#     - icon.jpg
#     - <libnx folder>/default_icon.jpg
#
# CONFIG_JSON is the filename of the NPDM config file (.json), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.json
#     - config.json
#   If a JSON file is provided or autodetected, an ExeFS PFS0 (.nsp) is built instead
#   of a homebrew executable (.nro). This is intended to be used for sysmodules.
#   NACP building is skipped as well.
#---------------------------------------------------------------------------------
APP_TITLE	:= PlaytimeNX
APP_AUTHOR	:= jarvarvarvis
APP_VERSION	:= 0.0.1
ICON		:= assets/icon.jpg

TARGET		:=	PlaytimeNX
BUILD		:=	nxbuild
SOURCES     :=	src

# nanovg
SOURCES		+=	src/nanovg src/nanovg/deko3d src/nanovg/deko3d/framework src/nanovg/deko3d/shaders
DATA		:=	data
ROMFS		:=	assets/romfs

# Output folders for autogenerated files in romfs
OUT_SHADERS	:=	shaders

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH	:=	-march=armv8-a+crc+crypto -mtune=cortex-a57 -mtp=soft -fPIE

# basic
C_OPTIMISE	:=	-O3 -DNDEBUG
# lto
C_OPTIMISE	+=	-flto=3 -ffat-lto-objects -fuse-linker-plugin -flto-compression-level=9 -ffunction-sections -fdata-sections -fmerge-all-constants -Wl,--gc-sections

# warns
MY_DEFINES	:=	-Wall #-Wextra #-Werror # todo: fix warns soon
# stb (we only need jpeg for ns icons)
MY_DEFINES	+=	-DSTBI_ONLY_JPEG
# version
MY_DEFINES	+= -DAPP_VERSION_STRING=$(APP_VERSION)

CFLAGS := $(ARCH) $(DEFINES) $(MY_DEFINES)
CFLAGS	+=	$(INCLUDE) -D__SWITCH__

ifeq ($(build),release)
	CFLAGS += $(C_OPTIMISE)
endif

CXXFLAGS	:= $(CFLAGS) -std=c++23 -fno-exceptions -fno-rtti

ASFLAGS	:=	$(ARCH)
LDFLAGS	=	-specs=$(DEVKITPRO)/libnx/switch.specs $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:= -ldeko3d -lnx

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS) $(LIBNX)
